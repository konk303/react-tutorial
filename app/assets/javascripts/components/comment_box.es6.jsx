class CommentBox extends React.Component {
  constructor(props) {
    super(props);
    this.state = {data: []};
    this.loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
    this.handleCommentSubmit = this.handleCommentSubmit.bind(this);
  }
  loadCommentsFromServer() {
    $.ajax({url: this.props.url,
            dataType: 'json',
            cache: false,
            success: (data) => this.setState(data),
            error: (xhr, status, err) => console.error(this.props.url, status, err.toString())
    });
  }
  handleCommentSubmit(comment) {
    const comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    const newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: (data) => { this.setState({data: data}) },
      error: (xhr, status, err) => {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }
    });
  }
  componentDidMount() {
    this.loadCommentsFromServer();
    /* setInterval(this.loadCommentsFromServer, this.props.pollInterval);*/
  }
  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
}

document.addEventListener('DOMContentLoaded', function() {
  ReactDOM.render(
    <CommentBox url="/comments" pollInterval={2000} />,
    /* <CommentBox data={data} />, */
    /* $('#content')[0]*/
    document.getElementById('content')
  );
});
